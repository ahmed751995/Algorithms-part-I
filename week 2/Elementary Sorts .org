* Elementary Sorts

** Intersection of two sets
   Given two arrays a[] and b[], each containing n distinct 2D points in the plane, 
   design a subquadratic algorithm to count the number of points that are contained 
   both in array a[] and array b[].

   *answer*

   1- sort array a[] and b[] using shell sort or insertion sort.

   2- let i = 0 and j = 0 be pointer to the index of each array a, b respectively.

   3- since they both have n items we iterate over the items as long as a or b < n.

   4- compare the value a[i] with b[j].

   5- if a[i] == b[j] we increase the counter by 1 and increase i and j by 1.

   6- if a[i] < b[j] we increase i by 1. 

   7- else increase j by 1.

   8- repeat *step 2*.

   since they both sorted we know that as long as a[i] < b[j] 
   no element in *a* will exist in *b* and vice versa.

   #+BEGIN_SRC 
   sorted_a = sort(a)
   sorted_b = sort(b)
   i, j = 0
   counter = 0
   white i < n and j < n:
      if sorted_a[i] == sorted_b[j] :
          counter += 1
          i += 1 and j += 1
      else if sorted_a[i] < sorted_b[j]:
          i += 1
      else:
          j += 1
   return counter
   #+END_SRC

   * complexity
    sort is O(n^2) and counting the distinct O(2n)
   

** Permutation
   Given two integer arrays of size n, design a subquadratic algorithm 
   to determine whether one is a permutation of the other. That is, do they 
   contain exactly the same entries but, possibly, in a different order.

   *answer*

   sort two arrays and start compare them one by one if any element is 
   different return false else return true


   #+BEGIN_SRC 
   let a, b two arrays
   a = sort(a)
   b = sort(b)
   for i in range length(a):
      if a[i] != b[i]:
        return false
   return true
   #+END_SRC
   
